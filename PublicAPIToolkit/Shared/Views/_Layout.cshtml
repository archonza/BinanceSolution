<!DOCTYPE html>
<html>
@model PublicAPIToolkit.Login.Models.LoginViewModel
<head>
   <meta charset="utf-8" />
   <meta name="viewport" content="width=device-width" />
   <title>@ViewBag.Title</title>
   @Styles.Render("~/Content/css")
   @Scripts.Render("~/bundles/modernizr")
</head>
<body>
   @{
      var loginViewModel = ViewData["LoginViewModel"] as PublicAPIToolkit.Login.Models.LoginViewModel;
   }
   <div class="navbar navbar-inverse navbar-fixed-top">
      <div class="container">
         <div class="navbar-header">
            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
               <span class="icon-bar"></span>
               <span class="icon-bar"></span>
               <span class="icon-bar"></span>
            </button>
         </div>
         <div class="navbar-collapse collapse">
            <ul class="nav navbar-nav">
               <li>@Html.ActionLink("Home", "Index", "Home", new { area = "" }, null)</li>
               <li>@Html.ActionLink("API", "Index", "Help", new { area = "" }, null)</li>
            </ul>

            <ul class="nav navbar-nav navbar-right">
               <li>
                  <table>

                     <colgroup>
                        <col span="3" style="column-gap: 5px" />
                     </colgroup>
                     <tr>
                        @{
                           if ((loginViewModel == null) || (loginViewModel.LoggedIn == false))
                           {
                              <th id="th-username" style="color:darkgray; font-size: 10px">Username</th>
                              <th id="th-pwd" style="color:darkgray; font-size: 10px; padding-left: 5px">Password</th>
                           }
                           else
                           {
                              <th style="color:darkgray; font-size: 10px; visibility: hidden;">Username</th>
                              <th style="color:darkgray; font-size: 10px; visibility: hidden; padding-left: 5px">Password</th>
                           }
                        }
                        <th></th>
                     </tr>
                     <tr>
                        @{

                           if ((loginViewModel == null) || (loginViewModel.LoggedIn == false))
                           {
                              <td>
                                 @Html.TextBoxFor(x => loginViewModel.UserName, new { id = "username" });
                              </td>
                              <td>
                                 @Html.TextBoxFor(x => loginViewModel.Password, new { id = "pwd" });
                              </td>

                           }
                           else
                           {
                              <td>
                                 @Html.HiddenFor(x => loginViewModel.UserName);
                              </td>
                              <td>
                                 @Html.HiddenFor(x => loginViewModel.Password);
                              </td>
                           }
                         }
                     </tr>
                  </table>
                  &nbsp;
               </li>
               @{
                  var loginInputModel = new { UserName = ViewData["UserName"], Password = ViewData["Password"] };
                  <li><a id="a-login" role="button" value="click" onclick="authorize()">Login</a></li>
                  <li>@Html.ActionLink("Register", "Index", "Registration", new { area = "" }, new { id = "actlnk-register" })</li>
                  <li>@Html.ActionLink("Logout", "Logout", "Login", new { area = "" }, new { id = "actlnk-logout", style = "visibility: hidden" })</li>
               }
            </ul>
         </div>
      </div>
   </div>
   <script language="javascript">
      function authorize()
      {
        var loginInputModel = {
           UserName: document.getElementById("username").value,
           Password: document.getElementById("pwd").value
         };
        $.ajax({
            type: 'POST',
            url: 'http://localhost:52609/Login/Login',
            data: JSON.stringify(loginInputModel),
            contentType: 'application/json; charset=utf-8',
            dataType: 'json',
            success: function (response) {
                console.log("success");
                console.log(response);
            },
            error: function (response) {
                //if (data.statusText != "OK") {
                //    console.log("error");
                //    console.log(response);
                //}
            }
        }).done(function (response) {
           var loggedIn = response.LoggedIn;
           if (loggedIn == true) {
              document.getElementById("username").style.visibility = "hidden";
              document.getElementById("pwd").style.visibility = "hidden";
              document.getElementById("th-username").style.visibility = "hidden";
              document.getElementById("th-pwd").style.visibility = "hidden";
              document.getElementById("a-login").style.visibility = "hidden";
              document.getElementById("actlnk-register").style.visibility = "hidden";
              document.getElementById("actlnk-logout").style.visibility = "visible";
              console.log("LoggedIn: " + loggedIn);
           }
           else {
              document.getElementById("username").style.visibility = "hidden";
              document.getElementById("btn-connect").style.visibility = "hidden";
              console.log("LoggedIn: " + loggedIn);
           }
        });
      }
   </script>
   <div class="container body-content">
      @RenderBody()
      <hr />
      <footer>
         <p>&copy; @DateTime.Now.Year - Binance Public API Toolkit</p>
      </footer>
   </div>

   @Scripts.Render("~/bundles/jquery")
   @Scripts.Render("~/bundles/bootstrap")
   @RenderSection("scripts", required: false)

</body>
</html>
